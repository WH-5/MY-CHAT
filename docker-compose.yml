#version: "3.8"

services:
  consul:
    image: hashicorp/consul:1.20.5  # 使用最新版本
    container_name: consul
    ports:
      - "8500:8500"       # Web UI
      - "8600:8600/udp"   # DNS
    command: "consul agent -dev -client=0.0.0.0"
    networks:
      - chat-network

  database:
    image: postgres:15
    container_name: database
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: whwhwhwhwhwhwhwh12321wh
      POSTGRES_DB: user_service
      POSTGRES_MULTIPLE_DATABASES: "user_service,chat_service,friend_service"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data  # 持久化 PostgreSQL 数据
      - ./init-scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chat-network
    deploy:
      resources:
        limits:
          memory: 512M #限制一下，部署在一个2G的服务器上
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d user_service"]
      interval: 10s
      retries: 3
      timeout: 5s

  redis:
    image: redis:7.0.12
    container_name: redis
    restart: always
    environment:
      - REDIS_PASSWORD=123456
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--requirepass", "123456"]
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "redis", "-a", "123456", "ping"]
      interval: 10s
      retries: 3
      timeout: 5s
    networks:
      - chat-network

  nginx-gateway:
    image: nginx:latest
    container_name: nginx-gateway
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro   # 挂载 Nginx 配置
    ports:
      - "80:80"                                  # 网关暴露的端口
    depends_on:
      - user-service
      - friend-service
      - push-service
    networks:
      - chat-network

  user-service:
    image: user-service:latest
#    build: .
    volumes:
      - ./configs:/data/conf
    container_name: user-service
    restart: always
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      consul:
        condition: service_started
    ports:
      - "8000:8000"
      - "9000:9000"
    networks:
      - chat-network

  friend-service:
    image: friend-service:latest
    #    build: .
#    volumes:
#      - ./configs:/data/conf
    container_name: friend-service
    restart: always
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      consul:
        condition: service_started
      user-service:
        condition: service_started
      push-service:
        condition: service_started
    ports:
      - "8001:8001"
      - "9001:9001"
    networks:
      - chat-network

  push-service:
    image: push-service:latest
    #    build: .
    #    volumes:
    #      - ./configs:/data/conf
    container_name: push-service
    restart: always
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      consul:
        condition: service_started
      user-service:
        condition: service_started
    ports:
      - "8002:8002"
      - "9002:9002"
    networks:
      - chat-network


volumes:
  redis-data:
  postgres-data:



networks:
  chat-network:
#    name: chat-network
    driver: bridge